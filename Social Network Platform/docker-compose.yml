version: '3.8'
services:

  api-gateway:
    build: 
      context: ./APIGatway
    ports:
      - "8080:8080"
    environment:
      - JWT_SECRET=your-secret-key
      - REDIS_ADDR=redis:6379
    depends_on:
      - redis

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"

  postservice:
    build: ./microservices/postService
    ports:
      - "3000:3000"
    environment:
      - REDIS_ADDR=redis:6379
      - MONGO_URI=mongodb://mongo:27017/postService
      - MONGO_DB=postService
      - POST_SERVICE_PORT=3000
    depends_on:
      - redis
      - mongo
      - rabbitmq

  feedservice:
    build: 
      context: ./microservices/feedService
    ports:
      - "4000:4000"
    environment:
      - MONGO_URI_Feed=mongodb://mongo:27017/feedService
      - MONGO_DB_Feed=feedService
      - postServiceUrl=http://postService:3000
      - userServiceUrl=http://userService:3002
      - FEED_SERVICE_PORT=4000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postservice
      - userservice
      - friendservice
      - rabbitmq

  mongo:
    image: "mongo:4.4"
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=postService

  postgres:
    image: "postgres:15-alpine"
    # container_name: postgres
    ports:  
      - "5433:5432"
    environment:
      - DB_USER=postgres
      - DB_HOST=postgres
      - DB_NAME=link_sphere
      - POSTGRES_PASSWORD=postgres
      - DB_PORT=5432
    volumes:
      - postgres-data:/var/lib/postgresql/data

  userservice:
    build: ./microservices/user-service
    # container_name: userService
    ports:
      - "3002:3002"
    environment:
      - USER_SERVICE_PORT=3002
    depends_on:
      - postgres
      - redis


  friendservice:
    build: 
      context: ./microservices/friendService
    ports:
      - "3003:7474"
    environment:
      - FRIEND_SERVICE_PORT=3003
      - REDIS_URL=redis://redis:6379
    depends_on:
      - neo4j
      - userservice

  neo4j:
    image: neo4j:5.12
    ports:
      - "7687:7687" # Bolt protocol port
      - "7474:7474" # Neo4j web interface port
    environment:
      # - NEO4J_URI=bolt://localhost:7687
      # - NEO4J_USERNAME=neo4j
      # - NEO4J_PASSWORD=password
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
  imageservice:
    build:
      context: ./microservices/ImageService
    ports:
      - "6000:6000"
    environment:
      - MINIO_USE_SSL=false
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_REGION=me-central-1
      - MINIO_BUCKETS=user-profiles,post-images,comment-attachments
      - MINIO_PROFILES_BUCKET=user-profiles
      - MINIO_POSTS_BUCKET=post-images
      - MINIO_COMMENTS_BUCKET=comment-attachments
      - REDIS_URL=redis://redis:6379
    depends_on:
      - minio
      - redis
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - USE_SSL=false
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data


volumes:
  mongo-data:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  minio-data: